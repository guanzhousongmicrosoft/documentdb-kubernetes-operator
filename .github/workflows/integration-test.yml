name: Integration Test - DocumentDB Operator

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  packages: write
  contents: read
  id-token: write

env:
  # Cluster configuration
  CERT_MANAGER_NS: cert-manager
  OPERATOR_NS: documentdb-operator
  DB_NS: documentdb-preview-ns
  DB_NAME: documentdb-preview
  # Connection parameters
  DB_USERNAME: default_user
  DB_PASSWORD: Admin100
  DB_PORT: 10260

jobs:
  # Use the reusable build workflow
  build:
    name: Build Images and Charts
    uses: ./.github/workflows/build-and-package.yml
    with:
      image_tag_prefix: 'integration-test'
      chart_version_prefix: '0.1.0'
      push_to_registry: true
    secrets: inherit

  integration-test:
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 45
    needs: build
    
    strategy:
      matrix:
        include:
          - architecture: amd64
            runner: ubuntu-latest
          # - architecture: arm64
          #   runner: ubuntu-22.04-arm
    
    env:
      # Use outputs from the build workflow
      IMAGE_NAME: documentdb-kubernetes-operator
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
      CHART_VERSION: ${{ needs.build.outputs.chart_version }}
      ARCHITECTURE: ${{ matrix.architecture }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl netcat-openbsd

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Create kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: documentdb-test-${{ matrix.architecture }}

    - name: Install dependencies
      run: |
        echo "Installing dependencies for ${{ matrix.architecture }} architecture..."
        
        # Install MongoDB shell - use architecture-appropriate method
        if [[ "${{ matrix.architecture }}" == "arm64" ]]; then
          # For ARM64, we may need to use different installation method
          curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-7.0.gpg
          echo "deb [ arch=arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        else
          # For AMD64
          curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-7.0.gpg
          echo "deb [ arch=amd64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        fi
        
        sudo apt-get update && sudo apt-get install -y mongodb-mongosh
        
        # Verify installation
        mongosh --version
        echo "âœ“ mongosh installed successfully for ${{ matrix.architecture }}"

    - name: Setup cluster
      uses: ./.github/actions/setup-cluster
      with:
        architecture: ${{ matrix.architecture }}
        cert-manager-namespace: ${{ env.CERT_MANAGER_NS }}
        operator-namespace: ${{ env.OPERATOR_NS }}
        chart-version: ${{ env.CHART_VERSION }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        repository-owner: ${{ github.repository_owner }}

    - name: Deploy DocumentDB cluster
      uses: ./.github/actions/deploy-documentdb
      with:
        architecture: ${{ matrix.architecture }}
        namespace: ${{ env.DB_NS }}
        cluster-name: ${{ env.DB_NAME }}
        node-count: '1'
        instances-per-node: '1'
        documentdb-image: 'ghcr.io/microsoft/documentdb/documentdb-local:16'
        pvc-size: '5Gi'
        public-load-balancer: 'false'
        timeout: '600'

    - name: Test connection with mongosh
      run: |
        echo "Testing connection with mongosh on ${{ matrix.architecture }} architecture..."
        chmod +x scripts/test-scripts/test-mongodb-connection.sh
        ./scripts/test-scripts/test-mongodb-connection.sh \
          --architecture "${{ matrix.architecture }}" \
          --namespace "${{ env.DB_NS }}" \
          --cluster-name "${{ env.DB_NAME }}" \
          --pod-name "${{ env.DB_NAME }}-1" \
          --port "${{ env.DB_PORT }}" \
          --username "${{ env.DB_USERNAME }}" \
          --password "${{ env.DB_PASSWORD }}" \
          --test-type 'comprehensive'

    - name: Test with Python PyMongo client
      run: |
        echo "Testing with Python PyMongo client on ${{ matrix.architecture }} architecture..."
        chmod +x scripts/test-scripts/test-python-pymongo.sh
        ./scripts/test-scripts/test-python-pymongo.sh \
          --architecture "${{ matrix.architecture }}" \
          --namespace "${{ env.DB_NS }}" \
          --cluster-name "${{ env.DB_NAME }}" \
          --pod-name "${{ env.DB_NAME }}-1" \
          --port "${{ env.DB_PORT }}" \
          --username "${{ env.DB_USERNAME }}" \
          --password "${{ env.DB_PASSWORD }}"

    - name: Collect logs on failure
      if: failure()
      uses: ./.github/actions/collect-logs
      with:
        architecture: ${{ matrix.architecture }}
        operator-namespace: ${{ env.OPERATOR_NS }}
        db-namespace: ${{ env.DB_NS }}
        db-cluster-name: ${{ env.DB_NAME }}
        cert-manager-namespace: ${{ env.CERT_MANAGER_NS }}
